}
for (i in 1:nmeas) {
ord <- if (sort)
rev(order(imp[, i], decreasing = TRUE)[1:n.var])
else 1:n.var
xmin <- if (colnames(imp)[i] %in% c("IncNodePurity",
"Mean Decrease Gini"))
0
else min(imp[ord, i])
dotchart(imp[ord, i], xlab = colnames(imp)[i], ylab = "",
main = if (nmeas == 1)
main
else NULL, xlim = c(xmin, max(imp[, i])), ...)
}
if (nmeas > 1)
mtext(outer = TRUE, side = 3, text = main, cex = 1.2)
invisible(imp)
}
varImpPlotNew <- function (x, sort = TRUE, n.var = min(30, nrow(x$importance)),
type = NULL, class = NULL, scale = TRUE, main = deparse(substitute(x)),
...)
{
if (!inherits(x, "randomForest"))
stop("This function only works for objects of class `randomForest'")
imp <- importance(x, class = class, scale = scale, type = type,
...)
if (ncol(imp) > 2)
imp <- imp[, -(1:(ncol(imp) - 2))]
nmeas <- ncol(imp)
if (nmeas > 1) {
op <- par(mfrow = c(1, 2), mar = c(4, 5, 4, 1), mgp = c(2,
0.8, 0), oma = c(0, 0, 2, 0), no.readonly = TRUE)
on.exit(par(op))
}
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "gray")
for (i in 1:nmeas) {
ord <- if (sort)
rev(order(imp[, i], decreasing = TRUE)[1:n.var])
else 1:n.var
xmin <- if (colnames(imp)[i] %in% c("IncNodePurity",
"Mean Decrease Gini"))
0
else min(imp[ord, i])
dotchart(imp[ord, i], xlab = colnames(imp)[i], ylab = "",
main = if (nmeas == 1)
main
else NULL, xlim = c(xmin, max(imp[, i])), ...)
}
if (nmeas > 1)
mtext(outer = TRUE, side = 3, text = main, cex = 1.2)
invisible(imp)
}
varImpPlotNew(model08$finalModel,n.var = 10,
main = "Variable Importance Plot",pch=16, type=2,
labels = labels)
varImpPlotNew(model08$finalModel,n.var = 10,
main = "Variable Importance Plot",pch=16, type=2,
labels = labels)
varImpPlotNew(model08$finalModel,n.var = 9,
main = "Variable Importance Plot",pch=16, type=2,
labels = labels)
varImpPlotNew(model08$finalModel,n.var = 9,
main = "Variable Importance Plot",pch=16, type=2,
labels = labels)
varImpPlotNew <- function (x, sort = TRUE, n.var = min(30, nrow(x$importance)),
type = NULL, class = NULL, scale = TRUE, main = deparse(substitute(x)),
...)
{
if (!inherits(x, "randomForest"))
stop("This function only works for objects of class `randomForest'")
imp <- importance(x, class = class, scale = scale, type = type,
...)
if (ncol(imp) > 2)
imp <- imp[, -(1:(ncol(imp) - 2))]
nmeas <- ncol(imp)
if (nmeas > 1) {
op <- par(mfrow = c(1, 2), mar = c(4, 5, 4, 1), mgp = c(2,
0.8, 0), oma = c(0, 0, 2, 0), no.readonly = TRUE)
on.exit(par(op))
}
for (i in 1:nmeas) {
ord <- if (sort)
rev(order(imp[, i], decreasing = TRUE)[1:n.var])
else 1:n.var
xmin <- if (colnames(imp)[i] %in% c("IncNodePurity",
"Mean Decrease Gini"))
0
else min(imp[ord, i])
dotchart(imp[ord, i], xlab = colnames(imp)[i], ylab = "",
main = if (nmeas == 1)
main
else NULL, xlim = c(xmin, max(imp[, i])), ...)
}
if (nmeas > 1)
mtext(outer = TRUE, side = 3, text = main, cex = 1.2)
invisible(imp)
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "gray")
}
varImpPlotNew(model08$finalModel,n.var = 9,
main = "Variable Importance Plot",pch=16, type=2,
labels = labels)
varImpPlotNew <- function (x, sort = TRUE, n.var = min(30, nrow(x$importance)),
type = NULL, class = NULL, scale = TRUE, main = deparse(substitute(x)),
...)
{
if (!inherits(x, "randomForest"))
stop("This function only works for objects of class `randomForest'")
imp <- importance(x, class = class, scale = scale, type = type,
...)
if (ncol(imp) > 2)
imp <- imp[, -(1:(ncol(imp) - 2))]
nmeas <- ncol(imp)
if (nmeas > 1) {
op <- par(mfrow = c(1, 2), mar = c(4, 5, 4, 1), mgp = c(2,
0.8, 0), oma = c(0, 0, 2, 0), no.readonly = TRUE)
on.exit(par(op))
}
for (i in 1:nmeas) {
ord <- if (sort)
rev(order(imp[, i], decreasing = TRUE)[1:n.var])
else 1:n.var
xmin <- if (colnames(imp)[i] %in% c("IncNodePurity",
"Mean Decrease Gini"))
0
else min(imp[ord, i])
dotchart(imp[ord, i], xlab = colnames(imp)[i], ylab = "",
main = if (nmeas == 1)
main
else NULL, xlim = c(xmin, max(imp[, i])), ...)
}
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "gray")
if (nmeas > 1)
mtext(outer = TRUE, side = 3, text = main, cex = 1.2)
invisible(imp)
}
varImpPlotNew(model08$finalModel,n.var = 9,
main = "Variable Importance Plot",pch=16, type=2,
labels = labels)
varImpPlotNew <- function (x, sort = TRUE, n.var = min(30, nrow(x$importance)),
type = NULL, class = NULL, scale = TRUE, main = deparse(substitute(x)),
...)
{
if (!inherits(x, "randomForest"))
stop("This function only works for objects of class `randomForest'")
imp <- importance(x, class = class, scale = scale, type = type,
...)
if (ncol(imp) > 2)
imp <- imp[, -(1:(ncol(imp) - 2))]
nmeas <- ncol(imp)
if (nmeas > 1) {
op <- par(mfrow = c(1, 2), mar = c(4, 5, 4, 1), mgp = c(2,
0.8, 0), oma = c(0, 0, 2, 0), no.readonly = TRUE)
on.exit(par(op))
}
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "gray")
for (i in 1:nmeas) {
ord <- if (sort)
rev(order(imp[, i], decreasing = TRUE)[1:n.var])
else 1:n.var
xmin <- if (colnames(imp)[i] %in% c("IncNodePurity",
"Mean Decrease Gini"))
0
else min(imp[ord, i])
dotchart(imp[ord, i], xlab = colnames(imp)[i], ylab = "",
main = if (nmeas == 1)
main
else NULL, xlim = c(xmin, max(imp[, i])), ...)
}
if (nmeas > 1)
mtext(outer = TRUE, side = 3, text = main, cex = 1.2)
invisible(imp)
}
varImpPlotNew(model08$finalModel,n.var = 9,
main = "Variable Importance Plot",pch=16, type=2,
labels = labels)
i <- 24*(0:8)
rect(8+i, 1, 24+i, 130, col = "lightgrey", border=NA)
rect(8+i, -10, 24+i, 0.1, col = "black", border=NA)
i <- 24*(0:8)
rect(8+i, 1, 24+i, 130, col = "lightgrey", border=NA)
rect(8+i, -10, 24+i, 0.1, col = "black", border=NA)
plot(1)
i <- 24*(0:8)
rect(8+i, 1, 24+i, 130, col = "lightgrey", border=NA)
rect(8+i, -10, 24+i, 0.1, col = "black", border=NA)
xpoints = 1:20
y = rnorm(20)
plot(NULL,ylim=c(-3,3),xlim=xpoints)
abline(v=xpoints,col="gray90",lwd=80)
abline(v=xpoints,col="white")
abline(h = 0, lty = 2)
points(xpoints, y, pch = 16, cex = 1.2, col = "red")
plot.new()
polygon(c(-min(df[,1])^2,-min(df[,1])^2,max(df[,1])^2,max(df[,1])^2),c(-min(df[,2])^2,max(df[,2])^2,max(df[,2])^2,-min(df[,2])^2), col="grey")
par(new=T)
plot(df)
plot.new()
polygon(c(-min(df[,1])^2,-min(df[,1])^2,max(df[,1])^2,max(df[,1])^2),c(-min(df[,2])^2,max(df[,2])^2,max(df[,2])^2,-min(df[,2])^2), col="grey")
par(new=T)
plot(df)
varImpPlotNew <- function (x, sort = TRUE, n.var = min(30, nrow(x$importance)),
type = NULL, class = NULL, scale = TRUE, main = deparse(substitute(x)),
...)
{
if (!inherits(x, "randomForest"))
stop("This function only works for objects of class `randomForest'")
imp <- importance(x, class = class, scale = scale, type = type,
...)
if (ncol(imp) > 2)
imp <- imp[, -(1:(ncol(imp) - 2))]
nmeas <- ncol(imp)
if (nmeas > 1) {
op <- par(mfrow = c(1, 2), mar = c(4, 5, 4, 1), mgp = c(2,
0.8, 0), oma = c(0, 0, 2, 0), no.readonly = TRUE)
on.exit(par(op))
}
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "gray")
for (i in 1:nmeas) {
par(new=T)
ord <- if (sort)
rev(order(imp[, i], decreasing = TRUE)[1:n.var])
else 1:n.var
xmin <- if (colnames(imp)[i] %in% c("IncNodePurity",
"Mean Decrease Gini"))
0
else min(imp[ord, i])
dotchart(imp[ord, i], xlab = colnames(imp)[i], ylab = "",
main = if (nmeas == 1)
main
else NULL, xlim = c(xmin, max(imp[, i])), ...)
}
if (nmeas > 1)
mtext(outer = TRUE, side = 3, text = main, cex = 1.2)
invisible(imp)
}
varImpPlotNew(model08$finalModel,n.var = 9,
main = "Variable Importance Plot",pch=16, type=2,
labels = labels)
rect(8+i, -10, 24+i, 0.1, col = "black", border=NA)
plot.new()
polygon(c(-min(df[,1])^2,-min(df[,1])^2,max(df[,1])^2,max(df[,1])^2),c(-min(df[,2])^2,max(df[,2])^2,max(df[,2])^2,-min(df[,2])^2), col="grey")
par(new=T)
plot(df)
par(bg='grey')
varImpPlotNew(model08$finalModel,n.var = 9,
main = "Variable Importance Plot",pch=16, type=2,
labels = labels)
par(bg='grey')
varImpPlot(model08$finalModel,n.var = 10,
main = "Variable Importance Plot",pch=16, type=2,
labels = labels)
varImpDF <- function(rf.model,n.var) {
var_imp <- data.frame(variable=rownames(importance(rf.model)),
importance=as.vector(importance(rf.model)))
var_imp$importance <- var_imp$importance/max(var_imp$importance)*100
var_imp <- arrange(var_imp,desc(importance))
var_imp$id <- c(1:length(rownames(importance(rf.model))))
var_imp <- var_imp[var_imp$id<=n.var,]
var_imp$id <- NULL
var_imp$variable <- as.factor(var_imp$variable)
return(var_imp)
}
varImpDF(model08$finalModel,9)
a <- varImpDF(model08$finalModel,9)
mplot(a)
source("functions.R")
imp <- varImpDF(model08$finalModel,9)
imp
ggplot(data=imp, aes(x = variable, y = importance)) +
geom_bar()
qplot(variable, data=imp, geom="bar", weight=importance, ylab="carat")
qplot(variable, data=imp, geom="bar",
weight=importance, xlab = "", ylab="Mean Gini Decrease")
imp
labels <- ("Disability",
"Age",
"Sex",
"Education",
"Internet for Jobs",
"Parental Status",
"Marital Status",
"Internet Frequency",
"Internet Usage")
labels <- ("Disability",
"Age",
"Sex",
"Education",
"Internet for Jobs",
"Parental Status",
"Marital Status",
"Internet Frequency",
"Internet Usage")
labels <- c("Disability",
"Age",
"Sex",
"Education",
"Internet for Jobs",
"Parental Status",
"Marital Status",
"Internet Frequency",
"Internet Usage")
imp <- varImpDF(model08$finalModel,9)
imp$variable <- labels
imp
qplot(variable, data=imp, geom="bar",
weight=importance, xlab = "", ylab="Mean Gini Decrease")
imp <- varImpDF(model08$finalModel,9)
imp$variable <- labels
imp$variable <- factor(imp$variable,levels = labels)
qplot(variable, data=imp, geom="bar",
weight=importance, xlab = "", ylab="Mean Gini Decrease")
qplot(variable, data=imp, geom="bar",
weight=importance, xlab = "", ylab="Mean Gini Decrease") +
coord_flip()
imp$variable <- factor(imp$variable,levels = rev(labels))
qplot(variable, data=imp, geom="bar",
weight=importance, xlab = "", ylab="Mean Gini Decrease") +
coord_flip()
qplot(variable, data=imp, geom="bar",
weight=importance, colour = importance,
xlab = "", ylab="Mean Gini Decrease",) +
coord_flip() +
###################################################
#Model04 is the best model. We explore it more
#NOTE: not anymore
model041 <- train(empl~.-psraid-month-cregion-state-
q1-intfreq-bbhome3-device1a-
game2f-stud-smjob1-snsjob2a-snsjob2b-
hisp, data = trainw,
method = 'gbm',
trControl = myControl,
#tuneGrid = gbmGrid,
na.action = na.exclude,
nTrain = round(0.75*dim(trainw)[1]))
qplot(variable, data=imp, geom="bar",
weight=importance, colour = importance,
xlab = "", ylab="Mean Gini Decrease") +
coord_flip() +
###################################################
#Model04 is the best model. We explore it more
#NOTE: not anymore
model041 <- train(empl~.-psraid-month-cregion-state-
q1-intfreq-bbhome3-device1a-
game2f-stud-smjob1-snsjob2a-snsjob2b-
hisp, data = trainw,
method = 'gbm',
trControl = myControl,
#tuneGrid = gbmGrid,
na.action = na.exclude,
nTrain = round(0.75*dim(trainw)[1]))
qplot(variable, data=imp, geom="bar",
weight=importance, colour = importance,
xlab = "", ylab="Mean Gini Decrease") +
coord_flip()
qplot(variable, data=imp, geom="bar",
weight=importance, fill = importance,
xlab = "", ylab="Mean Gini Decrease") +
coord_flip()
qplot(variable, data=imp, geom="bar",
weight=importance, fill = importance,
xlab = "", ylab="Mean Gini Decrease (MGD") +
coord_flip() +
guides(fill = guide_legend(title = "MGD"))
qplot(variable, data=imp, geom="bar",
weight=importance, fill = importance,
xlab = "", ylab="Mean Gini Decrease (MGD)") +
coord_flip() +
guides(fill = guide_legend(title = "MGD"))
qplot(variable, data=imp, geom="bar",
weight=importance, fill = importance,
xlab = "", ylab="Mean Gini Decrease (MGD)") +
coord_flip() +
guides(fill = guide_legend(title = "MGD")) +
labs(title = "Variable Importance Plot")
qplot(variable, data=imp, geom="bar",
weight=importance, fill = importance,
xlab = "", ylab="Mean Gini Decrease (MGD)") +
coord_flip() +
guides(fill = guide_legend(title = "MGD")) +
labs(title = "Variable Importance Plot") +
theme(plot.title = element_text(hjust = 0.5,
face = 'bold',
size 14))
qplot(variable, data=imp, geom="bar",
weight=importance, fill = importance,
xlab = "", ylab="Mean Gini Decrease (MGD)") +
coord_flip() +
guides(fill = guide_legend(title = "MGD")) +
labs(title = "Variable Importance Plot") +
theme(plot.title = element_text(hjust = 0.5,
face = 'bold',
size = 14))
disa <- weighted$disa[weighted$disa != 9]
disa[disa==1] <- "Disabled"
disa[disa==2] <- "Not Disabled"
emp <- weighted$empl[weighted$disa != 9]
disdatm <- propggplot(emp,disa)
require(reshape)
disa <- weighted$disa[weighted$disa != 9]
disa[disa==1] <- "Disabled"
disa[disa==2] <- "Not Disabled"
emp <- weighted$empl[weighted$disa != 9]
disdatm <- propggplot(emp,disa)
ggplot(disdatm,aes(x = colvar, y = value,fill = rowvar)) +
geom_bar(position = "fill",stat = "identity") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Employment Status by Disability",
x = "",
y = "Percentage",
fill = "Employment") +
theme(plot.title=element_text(hjust = 0.5,
face = 'bold',
size = 14))
require(scales)
disdatm <- propggplot(emp,disa)
ggplot(disdatm,aes(x = colvar, y = value,fill = rowvar)) +
geom_bar(position = "fill",stat = "identity") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Employment Status by Disability",
x = "",
y = "Percentage",
fill = "Employment") +
theme(plot.title=element_text(hjust = 0.5,
face = 'bold',
size = 14))
disa <- weighted$disa[weighted$disa != 9]
disa[disa==1] <- "Disabled"
disa[disa==2] <- "Not Disabled"
emp <- weighted$empl[weighted$disa != 9]
disdatm <- propggplot(emp,disa)
ggplot(disdatm,aes(x = colvar, y = value,fill = rowvar)) +
geom_bar(position = "fill",stat = "identity") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Employment Status by Disability",
x = "",
y = "Percentage",
fill = "Employment") +
theme(plot.title=element_text(hjust = 0.5,
face = 'bold',
size = 14))
setwd("~/Documents/Projects/weeklyAnalysis/Employment")
disa <- weighted$disa[weighted$disa != 9]
disa[disa==1] <- "Disabled"
disa[disa==2] <- "Not Disabled"
emp <- weighted$empl[weighted$disa != 9]
disdatm <- propggplot(emp,disa)
ggplot(disdatm,aes(x = colvar, y = value,fill = rowvar)) +
geom_bar(position = "fill",stat = "identity") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Employment Status by Disability",
x = "",
y = "Percentage",
fill = "Employment") +
theme(plot.title=element_text(hjust = 0.5,
face = 'bold',
size = 14))
emp
install.packages("ggmosaic")
require(ggmosaic)
qplot(variable, data=imp, geom="bar",
weight=importance, colour = importance,
xlab = "", ylab="Mean Gini Decrease") +
coord_flip()
qplot(variable, data=imp, geom="bar",
weight=importance, fill = importance,
xlab = "", ylab="Mean Gini Decrease") +
coord_flip()
qplot(variable, data=imp, geom="bar",
weight=importance, fill = importance,
xlab = "", ylab="Mean Gini Decrease (GDM)") +
coord_flip() +
labs(title = "Variable Importance Plot",
fill = "GDM")
qplot(variable, data=imp, geom="bar",
weight=importance, fill = importance,
xlab = "", ylab="Mean Gini Decrease (GDM)") +
coord_flip() +
labs(title = "Variable Importance Plot",
fill = "GDM") +
theme(plot.title = element_text(hjust = 0.5,
face = 'bold',
size = 14))
disdatm
ggplot(data = disdatm) +
geom_mosaic(aes(weight = value, x = product(rowvar, colvar),
fill=factor(rowvar)), na.rm=TRUE)
ggplot(data = disdatm) +
geom_mosaic(aes(weight = value, x = product(rowvar, colvar),
fill=factor(rowvar)), na.rm=TRUE) +
labs(title = "Employment Status by Disability",
x = "",
y = "Percentage",
fill = "Employment") +
theme(plot.title=element_text(hjust = 0.5,
face = 'bold',
size = 14))
disa <- weighted$disa
disa[disa==1] <- "Disabled"
disa[disa==2] <- "Not Disabled"
disa[disa==9] <- "Refused"
emp <- weighted$empl
disdatm <- propggplot(emp,disa)
ggplot(data = disdatm) +
geom_mosaic(aes(weight = value, x = product(rowvar, colvar),
fill=factor(rowvar)), na.rm=TRUE) +
labs(title = "Employment Status by Disability",
x = "",
y = "Percentage",
fill = "Employment") +
theme(plot.title=element_text(hjust = 0.5,
face = 'bold',
size = 14))
